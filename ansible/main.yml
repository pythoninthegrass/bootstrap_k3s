---
- name: Deploy K3s Cluster
  hosts: k3s_cluster
  become: true
  gather_facts: true
  vars_files:
    - vault.yml

  pre_tasks:
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
        use: systemd

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Update dnf cache
      ansible.builtin.dnf:
        update_cache: true
      when: ansible_os_family == "RedHat"

    - name: Install firewall packages for Debian
      ansible.builtin.apt:
        name:
          - iptables
          - firewalld
          - nftables
        state: present
      when: ansible_os_family == "Debian"

    - name: Install firewall packages for RedHat
      ansible.builtin.dnf:
        name:
          - firewalld
          - nftables
        state: present
      when: ansible_os_family == "RedHat"

    - name: Enable and start firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: true

    - name: Configure firewall ports
      ansible.posix.firewalld:
        port: "{{ item.port }}/{{ item.proto }}"
        permanent: true
        immediate: true
        state: enabled
      loop: "{{ firewall_ports }}"

    - name: Configure firewall networks
      ansible.posix.firewalld:
        source: "{{ item.network }}"
        zone: trusted
        permanent: true
        immediate: true
        state: enabled
      loop: "{{ firewall_networks }}"

  tasks:
    - name: Install dependencies for Debian
      ansible.builtin.apt:
        name:
          - build-essential
          - ca-certificates
          - git
          - curl
          - wireguard
          - wireguard-tools  # Add wireguard-tools package
        state: present
      when: ansible_os_family == "Debian"

    - name: Install dependencies for RedHat
      ansible.builtin.dnf:
        name:
          - curl
          - wireguard-tools
          - kernel-modules-extra
          - wireguard-dkms  # Add wireguard-dkms package
        state: present
      when: ansible_os_family == "RedHat"

    - name: Load WireGuard kernel module
      community.general.modprobe:
        name: wireguard
        state: present
      register: wireguard_module_load
      failed_when: false  # Don't fail if module can't be loaded

    - name: Check if WireGuard module is loaded
      ansible.builtin.command: lsmod | grep wireguard
      register: wireguard_loaded
      changed_when: false
      failed_when: false

    - name: Debug WireGuard module status
      ansible.builtin.debug:
        msg: "WireGuard module status: {{ 'LOADED' if wireguard_loaded.rc == 0 else 'NOT LOADED' }}"

    - name: Create K3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ k3s_server_location }}"
        - "{{ k3s_server_location }}/server"

    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: '0755'

    - name: Set default k3s_server_args if not defined
      ansible.builtin.set_fact:
        k3s_server_args: "{{ k3s_server_args | default(['--flannel-backend=vxlan']) }}"  # Set vxlan as default

    - name: Set combined server args
      ansible.builtin.set_fact:
        combined_server_args: "{{ k3s_server_args + (k3s_server_args_extra | default([])) }}"

    - name: Mark if this is a control node
      ansible.builtin.set_fact:
        is_control_node: "{{ k3s_control_node | default(false) | bool }}"

    - name: Set primary control node fact on first server
      ansible.builtin.set_fact:
        is_primary_control_node: true
      when:
        - k3s_type == "server"
        - is_control_node
        - inventory_hostname == ansible_play_hosts[0] or ansible_play_hosts | length == 1

    - name: Debug primary control node selection
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }} is the primary control node"
      when: is_primary_control_node is defined and is_primary_control_node

    - name: Install K3s primary server
      ansible.builtin.shell: |
        INSTALL_K3S_VERSION={{ k3s_version }} \
        INSTALL_K3S_CHANNEL={{ k3s_channel }} \
        INSTALL_K3S_EXEC="server {{ combined_server_args | join(' ') }} --cluster-init" \
        /tmp/k3s-install.sh
      args:
        creates: /usr/local/bin/k3s
      when: is_primary_control_node is defined and is_primary_control_node
      register: k3s_server_install

    - name: Get node token from primary server
      ansible.builtin.slurp:
        src: "{{ k3s_token_file }}"
      register: node_token_data
      when: is_primary_control_node is defined and is_primary_control_node

    - name: Set node token fact
      ansible.builtin.set_fact:
        primary_control_node: "{{ item }}"
        node_token: "{{ hostvars[item]['node_token_data']['content'] | b64decode }}"
      when:
        - hostvars[item]['is_primary_control_node'] is defined
        - hostvars[item]['is_primary_control_node']
        - hostvars[item]['node_token_data'] is defined
      loop: "{{ ansible_play_hosts }}"

    - name: Join additional servers
      ansible.builtin.shell: |
        set -o pipefail
        INSTALL_K3S_VERSION={{ k3s_version }} \
        INSTALL_K3S_CHANNEL={{ k3s_channel }} \
        K3S_TOKEN={{ node_token }} \
        K3S_URL=https://{{ hostvars[primary_control_node]['ansible_host'] }}:6443 \
        INSTALL_K3S_EXEC="server {{ combined_server_args | join(' ') }}" \
        /tmp/k3s-install.sh
      args:
        creates: /usr/local/bin/k3s
      when:
        - k3s_type == "server"
        - not (is_primary_control_node is defined and is_primary_control_node)
        - primary_control_node is defined
        - node_token is defined

    - name: Get kubeconfig content from primary server
      ansible.builtin.slurp:
        src: /etc/rancher/k3s/k3s.yaml
      register: kubeconfig_content
      when: is_primary_control_node is defined and is_primary_control_node

    - name: Create local kubeconfig with managed block
      ansible.builtin.template:
        src: k3s.yml.j2
        dest: "{{ lookup('env', 'HOME') }}/.kube/k3s.yml"
        mode: '0600'
      vars:
        kubeconfig_data: "{{ kubeconfig_content.content | b64decode }}"
        server_url: "{{ hostvars[primary_control_node]['ansible_host'] }}"
      delegate_to: localhost
      become: false
      when: is_primary_control_node is defined and is_primary_control_node
